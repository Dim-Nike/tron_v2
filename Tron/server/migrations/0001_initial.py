# Generated by Django 4.1.3 on 2024-03-19 11:33

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tariff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='none', max_length=20, verbose_name='Название лицензии')),
                ('mess_ln', models.IntegerField(verbose_name='Длина сообщения')),
                ('delay', models.IntegerField(default=5, verbose_name='Задержка')),
                ('count_msg', models.IntegerField(verbose_name='Количество сообщений')),
                ('name_license', models.CharField(choices=[('base', 'Базовый'), ('professionale', 'Проффисиональный'), ('premium', 'Преимум')], default=('base', 'Базовый'), max_length=20, verbose_name='Лицензия')),
            ],
            options={
                'verbose_name': 'Тариф',
                'verbose_name_plural': 'Тарифы',
            },
        ),
        migrations.CreateModel(
            name='Flesh',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('IDF', models.CharField(max_length=500, verbose_name='ИДФ')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активно')),
                ('tariff', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='server.tariff', verbose_name='Тариф')),
            ],
            options={
                'verbose_name': 'Флешка',
                'verbose_name_plural': 'Флешки',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('login', models.CharField(max_length=150, unique=True, verbose_name='Логин')),
                ('is_active_flesh', models.BooleanField(default=True, verbose_name='Активность аккаунта')),
                ('rif_token', models.CharField(blank=True, max_length=20, null=True, verbose_name='Реферальный токен')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='user/photo/%Y/%m/%d/', verbose_name='Фотография')),
                ('flesh', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='server.flesh', verbose_name='ID флешки')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
